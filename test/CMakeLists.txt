project(frost_test)

# add include directories
include_directories(
  ${FROST_TEST_DIR}/include
  ${CMAKE_CURRENT_BINARY_DIR}/include
)

# search source files
file(GLOB_RECURSE FROST_TESTS ${FROST_TEST_DIR}/tests/*.c)

# add source files as executable
add_executable(${PROJECT_NAME}
  ${FROST_SRC}
  ${FROST_TESTS}
  ${FROST_TEST_DIR}/run.c
)

# find test items
set(TEST_ITEMS "")
foreach(i ${FROST_TESTS})
  get_filename_component(file_name ${i} NAME_WE)
  list(APPEND TEST_ITEMS ${file_name})
endforeach()

# generates test items
set(TEST_HEADERFILE ${CMAKE_CURRENT_BINARY_DIR}/include/test_table.h)
file(WRITE ${TEST_HEADERFILE} "")
file(APPEND ${TEST_HEADERFILE} "// This file is generated automatically.\n")
file(APPEND ${TEST_HEADERFILE} "// BIG FAT WARNING: DO NOT EDIT THIS FILE.\n\n")
file(APPEND ${TEST_HEADERFILE} "#ifndef _TEST_ITEMS_AUTO_GENERATED_H\n")
file(APPEND ${TEST_HEADERFILE} "#define _TEST_ITEMS_AUTO_GENERATED_H\n\n")
file(APPEND ${TEST_HEADERFILE} "#include <testapi.h>\n\n")

# generates externs
foreach(i ${TEST_ITEMS})
  file(APPEND ${TEST_HEADERFILE} "extern test_result_t ${i}();\n")
endforeach()
file(APPEND ${TEST_HEADERFILE} "\n")

# generates struct
file(APPEND ${TEST_HEADERFILE} "typedef struct {\n")
file(APPEND ${TEST_HEADERFILE} "  const char *name;\n")
file(APPEND ${TEST_HEADERFILE} "  test_result_t (*func)();\n")
file(APPEND ${TEST_HEADERFILE} "} test_item_t;\n\n")

# generates function table
file(APPEND ${TEST_HEADERFILE} "static test_item_t TEST_ITEMS[] = {\n")
foreach(i ${TEST_ITEMS})
  file(APPEND ${TEST_HEADERFILE} "  { \"${i}\", ${i} },\n")
endforeach()
file(APPEND ${TEST_HEADERFILE} "};\n\n")

file(APPEND ${TEST_HEADERFILE} "#define TEST_SIZE (sizeof(TEST_ITEMS) / sizeof(test_item_t))\n")

file(APPEND ${TEST_HEADERFILE} "\n")
file(APPEND ${TEST_HEADERFILE} "#endif /* _TEST_ITEMS_AUTO_GENERATED_H */\n")
